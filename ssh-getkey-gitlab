#!/bin/sh
# vim: set ts=4:
#
# This script finds and prints authorized SSH public keys in GitLab for the
# username specified as the first argument.
#
# The program must be owned by root and not writable by group or others.
# It expects configuration file /etc/ssh/getkey-gitlab.conf.
#
# sshd_config for OpenSSH 6.2+:
#
#   AuthorizedKeysCommand /usr/local/bin/ssh-getkey-gitlab
#   AuthorizedKeysCommandUser sshd
#
# Please report issues at <https://github.com/phdhebde/ssh-getkey-gitlab/issues>.

# Patched version: GitLab IAM + Group check + auto account creation + title filter + ignore SSL
# Note: user creation only runs if script is executed as root 
# Use --sync-users to sync all users in allowed_groups
set -eu

readonly PROGNAME='ssh-getkey-gitlab'
readonly VERSION='0.2.2'
readonly CONF_FILE='/etc/ssh/getkey-gitlab.conf'

log() {
    logger -s -t sshd -p "auth.$1" "gitlab: $2"
}

die() {
    log err "$1"
    exit 1
}

# Load config early for all modes
if ! [ -r "$CONF_FILE" ]; then
    echo "$CONF_FILE not readable" >&2
    exit 1
fi
. "$CONF_FILE"
: ${minimum_uid:=1000}
: ${timeout:=5}
: ${cache_dir:="/var/cache/$PROGNAME"}

sync_users() {
    # Fix permissions if run as root
    if [ "$(id -u)" -eq 0 ] && [ -d "$cache_dir" ]; then
        chown sshd:nogroup "$cache_dir" 2>/dev/null || :
        chmod 700 "$cache_dir" 2>/dev/null || :
    fi
    log info "Starting user sync mode"
    IFS=','
    set -f
    group_ids=$(echo "$allowed_groups" | tr ',' ' ')
    for gid in $group_ids; do
        members_json=$(wget --no-check-certificate -q -O - -T "$timeout" \
            --header="PRIVATE-TOKEN: $private_token" \
            "$gitlab_url/api/v4/groups/$gid/members/all?per_page=100") || continue
        echo "$members_json" | grep -o '"username":"[^"]\+' | cut -d\" -f4 | sort -u | while read -r username; do
            [ -n "$username" ] && "$0" "$username"
        done
    done
    exit 0
}

case "${1:-}" in
    -h | --help | '') echo "Usage: $0 [--sync-users | -h | -V | USERNAME]"; exit 0;;
    -V | --version) echo "$PROGNAME $VERSION"; exit 0;;
    --sync-users) sync_users;;
esac



if [ -z "${gitlab_url:-}" ]; then
    die "missing \$gitlab_url in $CONF_FILE"
fi

uname="$1"
if ! expr "$uname" : '[a-zA-Z0-9._-]*$' 1>/dev/null; then
    die "bad characters in username: $uname"
fi

# Optional user creation (only if run as root)
if [ "$(id -u)" -eq 0 ] && ! id "$uname" >/dev/null 2>&1; then
    log info "Creating system user $uname"
    useradd -m -s /bin/bash "$uname" || die "could not create user $uname"
fi

# Optional UID check
uid=$(id -u "$uname" 2>/dev/null || echo 0)
if [ -n "$minimum_uid" ] && [ "$uid" -lt "$minimum_uid" ]; then
    log debug "user $uname ($uid) has uid < $minimum_uid"
    exit 2
fi

# Find GitLab user ID by username
user_json=$(wget --no-check-certificate -q -O - -T "$timeout" --header="PRIVATE-TOKEN: $private_token" "$gitlab_url/api/v4/users?username=$uname") || die "failed to get user info from GitLab"
user_id=$(echo "$user_json" | grep -o '"id":[0-9]\+' | head -n1 | cut -d: -f2)
[ -z "$user_id" ] && die "user $uname not found in GitLab"

# Check group membership
IFS=','
set -f  # disable globbing
group_ids=$(echo "$allowed_groups" | tr ',' ' ')
is_member=false
for gid in $group_ids; do
    code=$(wget --no-check-certificate -S -q -O /dev/null -T "$timeout" --header="PRIVATE-TOKEN: $private_token" "$gitlab_url/api/v4/groups/$gid/members/$user_id" 2>&1 | awk '/^  HTTP/{print $2}')
    if [ "$code" = 200 ]; then
        is_member=true
        break
    fi
done

if [ "$is_member" != true ]; then
    log info "user $uname (#$user_id) is not in allowed groups"
    exit 2
fi

cache_file="$cache_dir/$uname.keys"
src='GitLab'
keys_json=""
keys=""
if ! keys_json=$(wget --no-check-certificate -q -O - -T "$timeout" --header="PRIVATE-TOKEN: $private_token" "$gitlab_url/api/v4/users/$user_id/keys"); then
    case "$?" in
        4|7) log warn 'network failure, trying cached keys...';;
        8) log warn 'GitLab error response, trying cached keys...';;
        5) die 'SSL verification failure';;
        6) die "user $uname not found in GitLab";;
        *) die "wget failed with status code $?";;
    esac
    src='cache'
    if [ -r "$cache_file" ]; then
        keys="$(cat "$cache_file")"
    fi
else
    # Filter keys by title = ssh-git-sync
    keys=$(echo "$keys_json" | grep -Eo '{[^}]+}' | grep '"title":"ssh-git-sync"' | sed -n 's/.*"key":"\(ssh-[^\"]*\)".*/\1/p')
fi

keys_count=$(echo "$keys" | grep '^ssh' | wc -l)
log info "loaded $keys_count SSH key(s) from $src for user: $uname"

if [ "$keys_count" -gt 0 ] && [ "$src" != 'cache' ]; then
    if [ -d "$cache_dir" ] && [ -w "$cache_dir" ]; then
        printf '%s\n' "$keys" > "$cache_file"
        chmod 600 "$cache_file"
    else
        log warn "cache_dir $cache_dir does not exist or not writable!"
    fi
fi

printf '%s\n' "$keys"
